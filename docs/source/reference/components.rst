.. role:: py(code)
   :class: pre

.. role:: html(raw)
   :format: html

######################
 Traceable Components
######################

.. warning::

   Components with :func:`strikethrough` are in development and not yet supported. PyRayT is still in the alpha stages and more components are being added regularly. 

Sources
========

As a `forward ray tracer`_, PyRayT's rays are generated by sources and traced through the system until terminated. All sources inherit from the :class:`~pyrayt.components.Source` base class, which can be used to create custom sources. By default, all rays are propogating along the +X axis, but they can be moved and rotated in world space like any traceable object.

.. _`forward ray tracer`: https://cs.stanford.edu/people/eroberts/courses/soco/projects/1997-98/ray-tracing/types.html

Basic Sources
``````````````

* :class:`~pyrayt.components.LineOfRays` - A set of rays linearly spaced in one dimension
* :class:`~pyrayt.components.ConeOfRays` - A radially distributed set of rays originating from a point, with a predefined diverging angle
* :class:`~pyrayt.components.PointOfRays` - A spatically distributed set of rays originating from a point, with a predefined diverging angle
* :class:`~pyrayt.components.WedgeOfRays` - A set of rays angularly distributed in one dimension
* :class:`~pyryat.components.GridOfRays` - A set of rays uniformly distributed about an aperture, propogating alonge the +X axis

Additional Sources
```````````````````

* :class:`~pyrayt.components.Lamp` - A randomly generated set of rays, uniformly distributed over an aperture with a Lambertian intensity distribution.
* :class:`~pyrayt.components.StaticLamp` - Identical to :class:`~pyrayt.components.Lamp`, but uses caching to ensure successive calls to :meth:`~pyryat.components.Source.generate_rays` generate the same :class:`~pyrayt._pyrayt.RaySet` object.
* :class:`~pyryat.components.ImageSource` - Generates a set of Rays based on the pixel values of an image.

Built in Parts
====================

.. note::

   The :rp:`_` next to components link to additional resources for the describing the simulated components.  

.. _Apertures:

Specifying Apertures
`````````````````````
All component factory functions accept an :py:`aperture` keyword argument. Internally, components are created
from `Constructive Solid Geometry`_ operations performed on primitives in the tinygfx package. For example, the object returned by
:func:`~pyrayt.components.biconvex_lens` is the intersection of two spheres and an aperture primitive that sets the lens boundaries.

The aperture argument accepts either a single or tuple of floats, whose sign determines the final aperture.

+------------------+---------------------+---------------------------------------+-------------------------------------------+
|     argument     |    argument type    |            aperture shape             |               CSG primitive               |
+==================+=====================+=======================================+===========================================+
| :py:`x`          | float               | Circle with diameter x                | :class:`~tinygfx.g3d.primitives.Cylinder` |
+------------------+---------------------+---------------------------------------+-------------------------------------------+
| :py:`(y1,z1)`    | Tuple[float, float] | Rectangle with side lengths y1 and z1 | :class:`~tinygfx.g3d.primitives.Cube`     |
+------------------+---------------------+---------------------------------------+-------------------------------------------+
| :py:`(-y1, -z1)` | Tuple[float, float] | Ellipse with diameters y1 and z1      | :class:`~tinygfx.g3d.primitives.Cylinder` |
+------------------+---------------------+---------------------------------------+-------------------------------------------+

.. _`Constructive Solid Geometry`: https://www.fotonixx.com/posts/efficient-csg/

Lenses
```````

Lens Keyword arguments
~~~~~~~~~~~~~~~~~~~~~~~

Any of the following keyword arguments can be passed to a lens function.

* **material** (:class:`~pyrayt.materials.TracableMaterial`) - The lens material, defaults to a simple refractive material with n=1.5
* **aperture** (`specified aperture <Apertures>`) - The lenses aperture, defaults to a circular aperture with a diameter of 1

Spherical Lenses
~~~~~~~~~~~~~~~~~

* :func:`~pyrayt.components.thick_lens` :rp:`lenses`
* :func:`~pyrayt.components.biconvex_lens` 
* :func:`~pyrayt.components.plano_convex_lens`
* :func:`~pyrayt.components.biconcave_lens`
* :func:`~pyrayt.components.plano_concave_lens`

Nonstandard Lenses
~~~~~~~~~~~~~~~~~~~


* :func:`~pyrayt.components.cylindrical_lens` :rp:`cylindrical_lenses`
* :func:`~pyrayt.components.aspheric_lens`  :rp:`aspheric_optics`
* :func:`~pyrayt.components.ball_lens` :rp:`ball_lenses` 
* :func:`~pyryat.components.halfball_lens`

Mirrors
````````

Mirror Keyword arguments
~~~~~~~~~~~~~~~~~~~~~~~~~

* **material** (:class:`~pyrayt.materials.TracableMaterial`) - The mirror material. Defaults .to a perfect reflector
* **aperture** (`specified aperture <Apertures>`_) - The mirror aperture. Defaults to a circular aperture with a diameter of 1.

Planar Mirrors
~~~~~~~~~~~~~~~

* :func:`~pyrayt.components.plane_mirror` :rp:`mirrors`
* :func:`~pyrayt.components.front_surfaced_mirror` :rp:`first_surface_mirrors`
* :func:`~pyrayt.components.back_surfaced_mirror` :rp:`metal_coated_mirrors`

Conic Mirrors
~~~~~~~~~~~~~~~

* :func:`~pyrayt.components.spherical_mirror`  :encyclopedia:`http://farside.ph.utexas.edu/teaching/302l/lectures/node136.html`
* :func:`~pyrayt.components.parabolic_mirror` :rp:`parabolic_mirrors`
* :func:`~pyrayt.components.elliptical_mirror` :encyclopedia:`https://www.mathopenref.com/ellipseoptics.html`

Nonstandard Mirrors
~~~~~~~~~~~~~~~~~~~~

* :func:`~pyrayt.components.corner_cube` :encyclopedia:`http://farside.ph.utexas.edu/teaching/302l/lectures/node133.html`
* :func:`~pyrayt.components.cylindrical_mirror` 

Miscellaneous
``````````````

* :func:`~pyryat.components.pinhole` :rp:`pinholes`
* :func:`~pyrayt.components.baffle`
* :func:`~pyryat.comonents.prism` :rp:`prisms`


