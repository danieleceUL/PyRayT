version: 2.1

jobs:
  build:
    parameters:
      py_version:
        type: string
        default: "3.8"
    docker: # use the Docker executor
      - image: python:<<parameters.py_version>>

    environment: 
      PIP_CACHE_DIR: ~/project/.cache/pip/
      
    steps:
      - checkout
      - restore_cache:
            key: python<<parameters.py_version>>-cache-{{ checksum "poetry.lock" }}

      - run:
          name: Initialize Poetry
          command: |
            chmod +x ./scripts/poetry_init.sh
            sh ./scripts/poetry_init.sh
          
      - run:
          name: Installing Package Dependencies
          command: $POETRY install

      - save_cache:
          key: python<<parameters.py_version>>-cache-{{ checksum "poetry.lock" }}
          paths:
            - .cache/pip/
            - .poetry/
            - .venv/

  unit-tests:
    parameters:
      py_version:
        type: string
        default: "3.8"
    docker: # use the Docker executor
      - image: python:<<parameters.py_version>>

    environment: 
      PIP_CACHE_DIR: ~/project/.cache/pip/

    steps:
      - checkout
      - restore_cache:
          key: python<<parameters.py_version>>-cache-{{ checksum "poetry.lock" }}
      - run:
          name: Initialize Poetry
          command: |
            chmod +x ./scripts/poetry_init.sh
            sh ./scripts/poetry_init.sh
      - run:
          name: run unittests
          command: $POETRY run python -m unittest discover -s ./test -p test_*.py

  coverage:
    docker: # use the Docker executor
      - image: python:3.8

    steps:
      - checkout
      - restore_cache:
          key: python3.8-cache-{{ checksum "poetry.lock" }}
      - run:
          name: Initialize Poetry
          command: |
            chmod +x ./scripts/poetry_init.sh
            sh ./scripts/poetry_init.sh
      - run:
          name: Run Coverage
          command: $POETRY run python -m coverage run -m unittest discover
      - run: 
          name: Generate Coverage Reports
          command: |
            $POETRY run python -m coverage html -d ./htmlcov
            $POETRY run python -m coverage report
      - store_artifacts:
          path: ./htmlcov
  
  format:
    docker: # use the Docker executor
    - image: python:3.8

    steps:
      - checkout
      - restore_cache:
          key: python3.8-cache-{{ checksum "poetry.lock" }}
      - run:
          name: Initialize Poetry
          command: |
            chmod +x ./scripts/poetry_init.sh
            sh ./scripts/poetry_init.sh  
      - run:
          name: Validate Code Formatting
          command: $POETRY run black --check pyrayt tinygfx
  
  lint:
    docker: # use the Docker executor
    - image: python:3.8

    steps:
      - checkout
      - restore_cache:
          key: python3.8-cache-{{ checksum "poetry.lock" }}
      - run:
          name: Initialize Poetry
          command: |
            chmod +x ./scripts/poetry_init.sh
            sh ./scripts/poetry_init.sh  

      # This should never fail, it's just to collect the artifact
      - run:
          name: Validate Code Formatting
          command: $POETRY run pylint pyrayt tinygfx --exit-zero --output-format=json:lint_results.json,colorized

      - store_artifacts:
          path: ./lint_results.json

  integration-tests:
    parameters:
      py_version:
        type: string
        default: "3.8"
    docker: # use the Docker executor
    - image: python:<<parameters.py_version>>

    steps:
      - checkout
      - restore_cache:
          key: python<<parameters.py_version>>-cache-{{ checksum "poetry.lock" }}
      - run:
          name: Initialize Poetry
          command: |
            chmod +x ./scripts/poetry_init.sh
            sh ./scripts/poetry_init.sh  
      - run:
          name: Integration Tests
          command: $POETRY run python -m unittest discover -s ./test -p int_test_*.py

  deploy:
    docker: # use the Docker executor
      - image: python:3.8

    steps:
      - checkout
      - restore_cache:
          key: python3.8-cache-{{ checksum "poetry.lock" }}
      - run:
          name: Initialize Poetry
          command: |
            chmod +x ./scripts/poetry_init.sh
            sh ./scripts/poetry_init.sh  
      - run:
          name: Build Project
          command: $POETRY build
      - run: 
          name: Deploy to PYPI
          command: |
            if [[ $CIRCLE_BRANCH == "main" ]]; then  
              $POETRY publish -u $PYPI_USERNAME -p $PYPI_PASSWORD
            else
              $POETRY publish --dry-run
            fi 
            


workflows:
  build_and_deploy:
    jobs:
      - build:
          name: build37
          py_version: "3.7"
          filters:
            tags:
              only: /.*/

      - unit-tests:
          name: unit-tests37
          py_version: "3.7"
          requires:
            - build37

      - integration-tests:
          name: integration-tests37
          py_version: "3.7"
          requires:
            - build37
          filters:
            branches:
              only:
                - main
                - development
                - ci-debug

      - build:
          py_version: "3.8"
          filters:
            tags:
              only: /.*/

      - unit-tests:
          requires:
            - build

      - integration-tests:
          requires:
            - build
          filters:
            branches:
              only:
                - main
                - development
                - ci-debug

      - coverage:
          requires:
            - build
            - unit-tests
      
      - lint:
          requires:
            - build

      - format:
          requires:
            - build

      - deploy:
          context:
            - PYPI
          requires:
            - unit-tests
            - integration-tests
            - unit-tests37
            - integration-tests37
            - format

          filters:
            branches:
              only:
                - main
                - ci-debug