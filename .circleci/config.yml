version: 2.1

jobs:
  build:
    docker: # use the Docker executor
      - image: python:3.8
        auth:
          username: rfrazier716
          password: $DOCKER_API_KEY

    environment: 
      PIP_CACHE_DIR: ~/project/.cache/pip/
      
    steps:
      - checkout
      - restore_cache:
            key: python-cache-{{ checksum "poetry.lock" }}-{{ checksum ".circleci/config.yml" }}

      - run:
          name: Initialize Poetry
          command: |
            chmod +x ./scripts/poetry_init.sh
            sh ./scripts/poetry_init.sh
          
      - run:
          name: Installing Package Dependencies
          command: $POETRY install

      - save_cache:
          key: python-cache-{{ checksum "poetry.lock" }}-{{ checksum ".circleci/config.yml" }}
          paths:
            - .cache/pip/
            - .poetry/
            - .venv/

  unit-tests:
    docker: # use the Docker executor
      - image: python:3.8
        auth:
          username: rfrazier716
          password: $DOCKER_API_KEY

    environment: 
      PIP_CACHE_DIR: ~/project/.cache/pip/

    steps:
      - checkout
      - restore_cache:
          key: python-cache-{{ checksum "poetry.lock" }}-{{ checksum ".circleci/config.yml" }}
      - run:
          name: Initialize Poetry
          command: |
            chmod +x ./scripts/poetry_init.sh
            sh ./scripts/poetry_init.sh
      - run:
          name: run unittests
          command: $POETRY run python -m unittest discover

  coverage:
    docker: # use the Docker executor
      - image: python:3.8
        auth:
          username: rfrazier716
          password: $DOCKER_API_KEY

    steps:
      - checkout
      - restore_cache:
          key: python-cache-{{ checksum "poetry.lock" }}-{{ checksum ".circleci/config.yml" }}
      - run:
          name: Initialize Poetry
          command: |
            chmod +x ./scripts/poetry_init.sh
            sh ./scripts/poetry_init.sh
      - run:
          name: Run Coverage
          command: $POETRY run python -m coverage run -m unittest discover
      - run: 
          name: Generate Coverage Reports
          command: |
            $POETRY run python -m coverage html -d ./htmlcov
            $POETRY run python -m coverage report
      - store_artifacts:
          path: ./htmlcov
  
  format:
    docker: # use the Docker executor
    - image: python:3.8
      auth:
        username: rfrazier716
        password: $DOCKER_API_KEY

    steps:
      - checkout
      - restore_cache:
          key: python-cache-{{ checksum "poetry.lock" }}-{{ checksum ".circleci/config.yml" }}
      - run:
          name: Initialize Poetry
          command: |
            chmod +x ./scripts/poetry_init.sh
            sh ./scripts/poetry_init.sh  
      - run:
          name: Validate Code Formatting
          command: $POETRY run black --check pyrayt tinygfx
  
  lint:
    docker: # use the Docker executor
    - image: python:3.8
      auth:
        username: rfrazier716
        password: $DOCKER_API_KEY

    steps:
      - checkout
      - restore_cache:
          key: python-cache-{{ checksum "poetry.lock" }}-{{ checksum ".circleci/config.yml" }}
      - run:
          name: Initialize Poetry
          command: |
            chmod +x ./scripts/poetry_init.sh
            sh ./scripts/poetry_init.sh  

      # This should never fail, it's just to collect the artifact
      - run:
          name: Validate Code Formatting
          command: $POETRY run pylint pyrayt tinygfx --exit-zero --output-format=json:lint_results.json,colorized

      - store_artifacts:
          path: ./lint_results.json

  deploy:
    docker: # use the Docker executor
      - image: python:3.8
        auth:
          username: rfrazier
          password: $DOCKER_API_KEY

    environment:
      PYPI_USERNAME: $PYPI_USERNAME
      PYPI_PASSWORD: $PYPI_PASSWORD

    steps:
      - checkout
      - restore_cache:
          key: python-cache-{{ checksum "poetry.lock" }}
      - run:
          name: deploy to pypi
          command: |
            /root/.poetry/bin/poetry build
            /root/.poetry/bin/poetry publish --username $PYPI_USERNAME --password $PYPI_PASSWORD

workflows:
  build_and_deploy:
    jobs:
      - build:
          filters:
            tags:
              only: /.*/

      - unit-tests:
          requires:
            - build

      - coverage:
          requires:
            - build
      
      - lint:
          requires:
            - build

      - format:
          requires:
            - build

      - deploy:
          requires:
            - build
            - unit-tests
            - format
            
          filters:
            branches:
              only:
                - main